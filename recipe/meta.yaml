{% set version = "8.8.0.121" %}
{% set cuda_major = (cuda_compiler_version|default("12.0.0")).split(".")[0] %}
{% set platform = "linux-x86_64" %}  # [linux64]
{% set platform = "linux-ppc64le" %}  # [ppc64le]
{% set platform = "linux-sbsa" %}  # [aarch64]
{% set platform = "windows-x86_64" %}  # [win]
{% set extension = "tar.xz" %}  # [not win]
{% set extension = "zip" %}  # [win]

package:
  name: cudnn
  version: {{ version }}

source:
  url: https://developer.download.nvidia.com/compute/cudnn/redist/cudnn/{{ platform }}/cudnn-{{ platform }}-{{ version }}_cuda{{ cuda_major }}-archive.{{ extension }}
  sha256: 62046476076d1b455fb13fb78b38d3496bacafbfdbb0494fb3392240a04466ea  # [linux64 and cuda_major == "11"]
  sha256: a0792b666caaf593a9dd4130979578fd3a78230f4407645c295700ef8e7aaaf2  # [linux64 and cuda_major == "12"]
  sha256: a019f2c8a300991d94d718a3524377d978efadaa62349858741f17ef859a9e55  # [aarch64 and cuda_major == "11"]
  sha256: fc668519a8344e9d05335bad4bc5d23a504cdc7579aea41f12d6aa0f3079e709  # [aarch64 and cuda_major == "12"]
  sha256: 521c4b6ef579582953e4df2f5fe95a106bfc6d9dc30c6ac26ed6fd92fd0767b9  # [ppc64le and cuda_major == "11"]
  sha256: cd41ab8b61f5beb54e32c3668ecd311ce926c39006fba256b053dd7d248419d4  # [ppc64le and cuda_major == "12"]
  sha256: 4f0105a51ac6ea947154e252c8b220baf3345803f55644b5aad84e22ae4f8986  # [win and cuda_major == "11"]
  sha256: e362e1fbf6b101ad71aa5314f21d00a4353b90efbe5cdedc5fcfb0f3b68cd791  # [win and cuda_major == "12"]

build:
  number: 5
  skip: True  # [osx]
  skip: True  # [cuda_compiler_version == "11.2"]
  # Disable binary relocation to workaround patchelf issue
  # xref: https://github.com/NixOS/patchelf/issues/492
  binary_relocation: false
  script:
    - mkdir -p $PREFIX/include               # [linux]
    - cp include/cudnn*.h $PREFIX/include/   # [linux]
    - mkdir -p $PREFIX/lib                   # [linux]
    - mv lib/libcudnn*.so* $PREFIX/lib/      # [linux]

    - mkdir %LIBRARY_INC%                                   # [win]
    - copy %SRC_DIR%\\include\\cudnn*.h %LIBRARY_INC%\\     # [win]
    - mkdir %LIBRARY_LIB%                                   # [win]
    - copy %SRC_DIR%\\lib\\x64\\cudnn*.lib %LIBRARY_LIB%\\  # [win]
    - mkdir %LIBRARY_BIN%                                   # [win]
    - copy %SRC_DIR%\\bin\\cudnn*.dll %LIBRARY_BIN%\\       # [win]
  ignore_run_exports:
    - cudatoolkit
  run_exports:
    - {{ pin_subpackage('cudnn') }}

requirements:
  build:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - {{ compiler('cuda') }}
    - arm-variant * {{ arm_variant_type }}  # [aarch64]
    - sysroot_{{ target_platform }} 2.17  # [linux]
  host:
    - cuda-version {{ cuda_major }}.0
    - patchelf >=0.12  # [linux]
    # to suppress ".so not found" errors
    - libzlib       # [linux]
    - libzlib-wapi  # [win64]
  run:
    - {{ pin_compatible("cuda-version", max_pin="x") }}
    {% if cuda_major == "11" %}
    - cudatoolkit 11.*
    {% else %}
    - cuda-nvrtc
    - libcublas
    {% endif %}
  run_constrained:
    - __glibc >=2.17                        # [linux and not aarch64]
    - __glibc >=2.28                        # [linux and aarch64]
    - arm-variant * {{ arm_variant_type }}  # [aarch64]

test:
  requires:
    - {{ compiler('c') }}  # [linux]
  files:
    - test_load_elf.c      # [linux]
  commands:
    - if not exist %LIBRARY_INC%/cudnn.h exit 1                       # [win]
    - if not exist %LIBRARY_INC%/cudnn_adv_train.h exit 1             # [win]
    - if not exist %LIBRARY_LIB%/cudnn.lib exit 1                     # [win]
    - if not exist %LIBRARY_LIB%/cudnn_adv_train.lib exit 1           # [win]
    - if not exist %LIBRARY_BIN%/cudnn64_8.dll exit 1                 # [win]
    - if not exist %LIBRARY_BIN%/cudnn_adv_train64_8.dll exit 1       # [win]
    - test -f $PREFIX/include/cudnn.h                                 # [linux]
    - test -f $PREFIX/include/cudnn_adv_train.h                       # [linux]
    - test -f $PREFIX/lib/libcudnn.so                                 # [linux]
    - test -f $PREFIX/lib/libcudnn_adv_train.so                       # [linux]
    - ${GCC} test_load_elf.c -std=c99 -Werror -ldl -o test_load_elf   # [linux]
    - for f in $PREFIX/lib/libcudnn*.so; do ./test_load_elf $f; done  # [linux]

about:
  home: https://developer.nvidia.com/cudnn
  license: LicenseRef-cuDNN-Software-License-Agreement
  license_file: LICENSE
  license_url: https://docs.nvidia.com/deeplearning/cudnn/sla/index.html
  summary: "NVIDIA's cuDNN deep neural network acceleration library"
  description: |
    NVIDIA CUDA Deep Neural Network (cuDNN) is a GPU-accelerated library of
    primitives for deep neural networks. It provides highly tuned
    implementations of routines arising frequently in DNN applications.

    License Agreements:- The packages are governed by the NVIDIA cuDNN
    Software License Agreement (EULA). By downloading and using the packages,
    you accept the terms and conditions of the NVIDIA cuDNN EULA -
    https://docs.nvidia.com/deeplearning/cudnn/sla/index.html
  doc_url: https://docs.nvidia.com/deeplearning/cudnn/
  dev_url: https://developer.nvidia.com/rdp/cudnn-download

extra:
  recipe-maintainers:
    - adibbley
    - bdice
    - jakirkham
    - vyasr
